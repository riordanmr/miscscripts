' stripxx.vbs - script to process a list of library holds
' by stripping invalid entries.  These entries can be identified
' via their call numbers, which start with XX.
' Input is a file generated by Workflows by printing a holds
' list to an application (e.g. notepad.exe) rather than a printer.
' Input consists of HTML; here's an example of a bogus row:
' <tr>
' <td valign="top" align="left">
' XX(1840715.1)</td>
' <td valign="top" align="left">
' 1</td>
' <td valign="top" align="left">
' The Daughter of Auschwitz: My Story of Resilience,...</td>
' <td valign="top" align="left">
' 1840715-1001</td>
' <td valign="top" align="left">
' SEDNEW</td>
' <td valign="top" align="left">
' NBNF</td>
' </tr>
' 
' Usage:  cscript //e:vbscript //nologo stripxx.vbs
' Print the output via Print on Both Side; Flip on long edge.
'
' Mark Riordan   05-NOV-2022

Const ForWriting   = 2

sub main()

  filename = "holds.html"
  outlfn = "holdsstripped.html"

  Set fso = CreateObject("Scripting.FileSystemObject")
  Set fin = fso.OpenTextFile(filename)
  set fout = fso.OpenTextFile(outlfn,ForWriting,True)

  Set re = New RegExp
  With re
    .Pattern    = "3370\d\d\d\d\d\d\d\d\d\d"
  End With

  HasBad = false
  NTotal = 0
  NBad = 0
  NGood = 0
  ThisRec = ""
  bLookingForHead = True
  ' This logic would probably fail if the first row has XX in it,
  ' because it would not output the beginning part of the document.
  ' In practice, I don't think that will happen.
  Do Until fin.AtEndOfStream
    line = fin.ReadLine
    ' Look for a 14-digit barcode and replace it with a barcode that has
    ' a space before the last 4 digits.  This is because volunteers pulling holds
    ' check the last 4 digits on the printout to the last 4 digits of the item's
    ' barcode.  Separating these digits on the printout - as they are separated
    ' on the item - makes this comparison easier.
    ' Also, add HTML to make the first 10 digits smaller, because in practice
    ' they are rarely used.  This helps make the last 4 digits more prominent.
    Set matches = re.Execute(line)
    if matches.Count > 0 Then
      idxstart = matches.Item(0).FirstIndex
      line = "<small>" & Left(line,idxstart+10) & "</small>&nbsp;" & Mid(line,1+idxstart+10)
    End If

    If bLookingForHead Then
      if line = "</head>" then
        bLookingForHead = False
        fout.WriteLine "<style>"
        fout.WriteLine "table {"
        fout.WriteLine "    border-collapse: collapse;"
        fout.WriteLine "}"
        fout.WriteLine ""
        fout.WriteLine "tr {"
        fout.WriteLine "    border-top: 1px solid #000;"
        fout.WriteLine "    border-bottom: 1px solid #000;"
        fout.WriteLine "}"
        fout.WriteLine "table.print-friendly tr td, table.print-friendly tr th {"
        fout.WriteLine "    page-break-inside: avoid;"
        fout.WriteLine "}"
        fout.WriteLine "</style>"
        fout.WriteLine "<!-- Author: Mark Riordan -->"
      End If
      fout.WriteLine line
    Else
      ThisRec = ThisRec & vbCrLf & line
      if instr(line, "XX") > 0 then
        hasbad = true
      elseif instr(line,"</tr>") > 0 then
        ' This is the end of a record, so it's time to make some decisions.
        NTotal = NTotal + 1
        ' End of entry.  Should we output it?
        if Not HasBad Then
           if InStr(ThisRec,"33701") > 0 Then 
             NGood = NGood + 1
           End If
           fout.WriteLine ThisRec
        Else
           NBad = NBad + 1
        End If
        ThisRec = ""
        HasBad = False
      End If
    end if
  Loop
  fout.WriteLine ThisRec
  fout.Close
  WScript.Echo NTotal & " total items; " & NGood & " good; " & NBad & " bad."

end sub

main
